from django.test import TestCase

from apps.users.models import User, get_default_profile_username
from apps.core.testing.factories import UserFactory


class UserModelTests(TestCase):

    def test_create_user_with_email_success(self):
        """Tests if user creation with email is successful"""
        email = 'test@marsimon.com'
        password = 'a;d+-394hasldf0)'

        user = User.objects.create_user(
            email=email,
            password=password
        )

        self.assertEqual(user.email, email)
        self.assertTrue(user.check_password(password))

    def test_new_user_has_email_normalized(self):
        """Tests if the email for a new user is normalized"""
        email = 'Test@MARSIMON.COM'
        user = User.objects.create_user(email, 'a;d+-394hasldf0)')
        self.assertEqual(user.email, 'Test@marsimon.com')

    def test_new_user_has_permissions_mixin_attributes(self):
        """Tests if the new user has the permissions mixin attributes"""
        email = 'test@marsimon.com'
        password = 'a;d+-394hasldf0)'

        user = User.objects.create_user(
            email=email,
            password=password
        )

        self.assertTrue(hasattr(user, 'user_permissions'))


class UserManagerTests(TestCase):

    def setUp(self):
        self.usermanager = User.objects

    def test_create_new_superuser(self):
        """Tests creating a new superuser with the user manager"""
        user = self.usermanager.create_superuser(
            'test@marsimon.com',
            'a;d+-394hasldf0)'
        )
        self.assertTrue(user.is_superuser)
        self.assertTrue(user.is_staff)

    def test_create_new_user(self):
        """Test creating a new user with the user manager"""
        user = self.usermanager.create_user(
            'test@marsimon.com',
            'a;d+-394hasldf0)'
        )
        self.assertFalse(user.is_superuser)
        self.assertFalse(user.is_staff)


class ProfileModelTests(TestCase):
    """Tests for the profile model"""

    def setUp(self) -> None:
        self.userfactory = UserFactory()
        self.user = self.userfactory.user()

    def test_get_default_profile_username(self):
        """Test that the default username generator works"""
        username = get_default_profile_username()
        self.assertIn('guest', username)

    def test_default_username_succeeds_twice(self):
        """Test that default username generation succeeds twice"""
        self.userfactory.user()
        self.userfactory.user()

    def test_auto_generated_username_can_be_changed(self):
        """Test that a profile with an autogenerated username can have its username changed"""
        user = self.userfactory.user()
        self.assertFalse(user.profile.is_username_chosen)

    def test_change_username_first_time_succeeds(self):
        """Test that changing a profile's username works"""
        newusername = 'newusername'
        self.user.profile.set_username(newusername)
        self.assertEqual(self.user.profile.username, newusername)
        self.assertTrue(self.user.profile.is_username_chosen)

    def test_change_username_second_time_raises_illegalcall(self):
        """Test that changing a username fails if is_username_chosen is set to true"""
        from apps.core.exceptions import IllegalCallException
        self.user.profile.is_username_chosen = True
        self.user.profile.save()
        with self.assertRaises(IllegalCallException):
            self.user.profile.set_username('newusername')
        self.assertNotEqual(self.user.profile.username, 'newusername')

    def test_change_username_already_exists_raises_alreadyexists(self):
        from apps.core.exceptions import AlreadyExistsException
        common_username = 'newusername'
        self.user.profile.set_username(common_username)
        user2 = self.userfactory.user()
        with self.assertRaises(AlreadyExistsException):
            user2.profile.set_username(common_username)
        self.assertNotEqual(user2.profile.username, common_username)
